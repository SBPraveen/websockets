"use strict";

var _config = _interopRequireDefault(require("../config"));
var _hapi = _interopRequireDefault(require("@hapi/hapi"));
var _httpRoute = _interopRequireDefault(require("./routes/httpRoute"));
var _socket = _interopRequireDefault(require("socket.io"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const initHttp = async () => {
  const server = _hapi.default.server({
    port: _config.default.httpServerconfig.listenPort,
    host: _config.default.httpServerconfig.listenHost,
    routes: {
      cors: {
        origin: [_config.default.cors]
      }
    }
  });

  //routes
  server.route(_httpRoute.default);
  await server.start();
  console.log(`Server running on ${server.info.uri}`);
};
process.on('unhandledRejection', err => {
  console.log("Problem while starting the server: " + err);
  process.exit(1);
});
initHttp();
const initWebsockets = async () => {
  const server = _hapi.default.server({
    port: _config.default.websocketServerconfig.listenPort,
    host: _config.default.websocketServerconfig.listenHost,
    routes: {
      cors: {
        origin: ["http://localhost:3000"]
      }
    }
  });
  const io = (0, _socket.default)(server.listener, {
    cors: {
      origin: "http://localhost:3000",
      methods: ["GET", "POST"]
    }
  });
  let jobId = "";
  let timeStamp = "";
  io.on('connection', socket => {
    console.log('connected');
    socket.on('generateChecklist', data => {
      console.log('generateChecklist========================');
      jobId = data.jobId;
      timeStamp = data.timeStamp;
      let i = 0;
      const setInter = setInterval(() => {
        if (i === 4) {
          clearInterval(setInter);
        }
        let msg = "";
        switch (i) {
          case 0:
            msg = "duty result";
            break;
          case 1:
            msg = "checklist result";
            break;
          case 2:
            msg = "flatfile result";
            break;
          default:
            msg = "All calls are over";
        }
        socket.emit("generateChecklistData", msg);
        i += 1;
      }, 1000);
    });
  });

  // io.on("connection", function (socket) {

  //     console.log('connected');

  //      Do all the socket stuff here.

  // })

  await server.start();
  console.log(`Websocket server running on ${server.info.uri}`);
};
process.on('unhandledRejection', err => {
  console.log("Problem while starting the server: " + err);
  process.exit(1);
});
initWebsockets();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29uZmlnIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfaGFwaSIsIl9odHRwUm91dGUiLCJfc29ja2V0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJpbml0SHR0cCIsInNlcnZlciIsIkhhcGkiLCJwb3J0IiwiY29uZmlnIiwiaHR0cFNlcnZlcmNvbmZpZyIsImxpc3RlblBvcnQiLCJob3N0IiwibGlzdGVuSG9zdCIsInJvdXRlcyIsImNvcnMiLCJvcmlnaW4iLCJyb3V0ZSIsImh0dHBSb3V0ZSIsInN0YXJ0IiwiY29uc29sZSIsImxvZyIsImluZm8iLCJ1cmkiLCJwcm9jZXNzIiwib24iLCJlcnIiLCJleGl0IiwiaW5pdFdlYnNvY2tldHMiLCJ3ZWJzb2NrZXRTZXJ2ZXJjb25maWciLCJpbyIsIlNvY2tldElPIiwibGlzdGVuZXIiLCJtZXRob2RzIiwiam9iSWQiLCJ0aW1lU3RhbXAiLCJzb2NrZXQiLCJkYXRhIiwiaSIsInNldEludGVyIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwibXNnIiwiZW1pdCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb25maWcgZnJvbSBcIi4uL2NvbmZpZ1wiO1xuaW1wb3J0IEhhcGkgZnJvbSBcIkBoYXBpL2hhcGlcIlxuaW1wb3J0IGh0dHBSb3V0ZSBmcm9tIFwiLi9yb3V0ZXMvaHR0cFJvdXRlXCI7XG5pbXBvcnQgU29ja2V0SU8gZnJvbSBcInNvY2tldC5pb1wiXG5cbmNvbnN0IGluaXRIdHRwID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHNlcnZlciA9IEhhcGkuc2VydmVyKHtcbiAgICAgICAgcG9ydCA6IGNvbmZpZy5odHRwU2VydmVyY29uZmlnLmxpc3RlblBvcnQsXG4gICAgICAgIGhvc3Q6IGNvbmZpZy5odHRwU2VydmVyY29uZmlnLmxpc3Rlbkhvc3QsXG4gICAgICAgIHJvdXRlczp7XG4gICAgICAgICAgICBjb3JzOntcbiAgICAgICAgICAgICAgICBvcmlnaW46W2NvbmZpZy5jb3JzXVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSlcblxuICAgIC8vcm91dGVzXG4gICAgc2VydmVyLnJvdXRlKGh0dHBSb3V0ZSlcblxuICAgIGF3YWl0IHNlcnZlci5zdGFydCgpXG4gICAgY29uc29sZS5sb2coYFNlcnZlciBydW5uaW5nIG9uICR7c2VydmVyLmluZm8udXJpfWApXG59XG5cbnByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIChlcnIpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIlByb2JsZW0gd2hpbGUgc3RhcnRpbmcgdGhlIHNlcnZlcjogXCIgKyBlcnIpXG4gICAgcHJvY2Vzcy5leGl0KDEpXG59KVxuXG5pbml0SHR0cCgpXG5cbmNvbnN0IGluaXRXZWJzb2NrZXRzID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHNlcnZlciA9IEhhcGkuc2VydmVyKHtcbiAgICAgICAgcG9ydCA6IGNvbmZpZy53ZWJzb2NrZXRTZXJ2ZXJjb25maWcubGlzdGVuUG9ydCAsXG4gICAgICAgIGhvc3Q6IGNvbmZpZy53ZWJzb2NrZXRTZXJ2ZXJjb25maWcubGlzdGVuSG9zdCxcbiAgICAgICAgcm91dGVzOntcbiAgICAgICAgICAgIGNvcnM6e1xuICAgICAgICAgICAgICAgIG9yaWdpbjpbXCJodHRwOi8vbG9jYWxob3N0OjMwMDBcIl1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCBpbyA9IFNvY2tldElPKHNlcnZlci5saXN0ZW5lciwge1xuICAgICAgICBjb3JzOiB7XG4gICAgICAgICAgb3JpZ2luOiBcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMFwiLFxuICAgICAgICAgIG1ldGhvZHM6IFtcIkdFVFwiLCBcIlBPU1RcIl1cbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgIGxldCBqb2JJZD1cIlwiXG4gICAgbGV0IHRpbWVTdGFtcD1cIlwiXG5cbiAgICBpby5vbignY29ubmVjdGlvbicsIChzb2NrZXQpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ2Nvbm5lY3RlZCcpOyAgXG4gICAgICAgIHNvY2tldC5vbignZ2VuZXJhdGVDaGVja2xpc3QnLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2dlbmVyYXRlQ2hlY2tsaXN0PT09PT09PT09PT09PT09PT09PT09PT09Jyk7IFxuICAgICAgICAgICAgam9iSWQgPSBkYXRhLmpvYklkXG4gICAgICAgICAgICB0aW1lU3RhbXAgPSBkYXRhLnRpbWVTdGFtcCAgXG4gICAgICAgICAgICBsZXQgaT0gMFxuICAgICAgICAgICAgY29uc3Qgc2V0SW50ZXIgPSBzZXRJbnRlcnZhbCgoKT0+e1xuICAgICAgICAgICAgICAgIGlmKGkgPT09IDQpe1xuICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHNldEludGVyKVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgbXNnID0gXCJcIlxuICAgICAgICAgICAgICAgIHN3aXRjaChpKXtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgbXNnID0gXCJkdXR5IHJlc3VsdFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1zZyA9IFwiY2hlY2tsaXN0IHJlc3VsdFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1zZyA9IFwiZmxhdGZpbGUgcmVzdWx0XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1zZyA9IFwiQWxsIGNhbGxzIGFyZSBvdmVyXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc29ja2V0LmVtaXQoXCJnZW5lcmF0ZUNoZWNrbGlzdERhdGFcIiAsbXNnKTtcbiAgICAgICAgICAgICAgICBpICs9IDFcbiAgICAgICAgICAgIH0sIDEwMDApICAgICBcbiAgICAgICAgfSk7ICAgXG4gICAgfSk7XG5cblxuXG5cbiAgICAvLyBpby5vbihcImNvbm5lY3Rpb25cIiwgZnVuY3Rpb24gKHNvY2tldCkge1xuXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKCdjb25uZWN0ZWQnKTtcbiAgICBcbiAgICAvLyAgICAgIERvIGFsbCB0aGUgc29ja2V0IHN0dWZmIGhlcmUuXG4gICAgXG4gICAgLy8gfSlcbiAgICBcblxuICAgIGF3YWl0IHNlcnZlci5zdGFydCgpXG4gICAgY29uc29sZS5sb2coYFdlYnNvY2tldCBzZXJ2ZXIgcnVubmluZyBvbiAke3NlcnZlci5pbmZvLnVyaX1gKVxufVxuXG5wcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCAoZXJyKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJQcm9ibGVtIHdoaWxlIHN0YXJ0aW5nIHRoZSBzZXJ2ZXI6IFwiICsgZXJyKVxuICAgIHByb2Nlc3MuZXhpdCgxKVxufSlcblxuaW5pdFdlYnNvY2tldHMoKVxuXG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsS0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsVUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsT0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQWdDLFNBQUFELHVCQUFBSyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBRWhDLE1BQU1HLFFBQVEsR0FBRyxNQUFBQSxDQUFB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